{"/home/travis/build/npmtest/node-npmtest-onoff/test.js":"/* istanbul instrument in package npmtest_onoff */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-onoff/lib.npmtest_onoff.js":"/* istanbul instrument in package npmtest_onoff */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_onoff = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_onoff = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-onoff/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-onoff && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_onoff */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_onoff\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_onoff.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_onoff.rollup.js'] =\n            local.assetsDict['/assets.npmtest_onoff.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_onoff.__dirname + '/lib.npmtest_onoff.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-onoff/node_modules/onoff/onoff.js":"\"use strict\";\n\nvar fs = require('fs'),\n  Epoll = require('epoll').Epoll;\n\nvar GPIO_ROOT_PATH = '/sys/class/gpio/',\n  ZERO = new Buffer('0'),\n  ONE = new Buffer('1');\n\nexports.version = '1.1.1';\n\nfunction pollerEventHandler(err, fd, events) {\n  var value = this.readSync(),\n    callbacks = this.listeners.slice(0);\n\n  if (this.opts.debounceTimeout > 0) {\n    setTimeout(function () {\n      if (this.listeners.length > 0) {\n        // Read current value before polling to prevent unauthentic interrupts.\n        this.readSync();\n        this.poller.modify(this.valueFd, Epoll.EPOLLPRI | Epoll.EPOLLONESHOT);\n      }\n    }.bind(this), this.opts.debounceTimeout);\n  }\n\n  callbacks.forEach(function (callback) {\n    callback(err, value);\n  });\n}\n\n/**\n * Constructor. Exports a GPIO to userspace.\n *\n * The constructor is written to function for both superusers and\n * non-superusers. See README.md for more details.\n *\n * gpio: number      // The Linux GPIO identifier; an unsigned integer.\n * direction: string // Specifies whether the GPIO should be configured as an\n *                   // input or output. The valid values are: 'in', 'out',\n *                   // 'high', and 'low'. 'high' and 'low' are variants of\n *                   // 'out' that configure the GPIO as an output with an\n *                   // initial level of high or low respectively.\n * [edge: string]    // The interrupt generating edge for the GPIO. Can be\n *                   // specified for GPIO inputs and outputs. The edge\n *                   // specified determine what watchers watch for. The valid\n *                   // values are: 'none', 'rising', 'falling' or 'both'.\n *                   // The default value is 'none'. [optional]\n * [options: object] // Additional options. [optional]\n *\n * The options argument supports the following:\n * debounceTimeout: number  // Can be used to software debounce a button or\n *                          // switch using a timeout. Specified in\n *                          // milliseconds. The default value is 0.\n * activeLow: boolean       // Specifies whether the values read from or\n *                          // written to the GPIO should be inverted. The\n *                          // interrupt generating edge for the GPIO also\n *                          // follow this this setting. The valid values for\n *                          // activeLow are true and false. Setting activeLow\n *                          // to true inverts. The default value is false.\n */\nfunction Gpio(gpio, direction, edge, options) {\n  var valuePath,\n    directionSet = false,\n    tries = 0;\n\n  if (!(this instanceof Gpio)) {\n    return new Gpio(gpio, direction, edge, options);\n  }\n\n  if (typeof edge === 'object' && !options) {\n    options = edge;\n    edge = undefined;\n  }\n\n  options = options || {};\n\n  this.gpio = gpio;\n  this.gpioPath = GPIO_ROOT_PATH + 'gpio' + this.gpio + '/';\n  this.opts = {};\n  this.opts.debounceTimeout = options.debounceTimeout || 0;\n  this.readBuffer = new Buffer(16);\n  this.listeners = [];\n\n  valuePath = this.gpioPath + 'value';\n\n  if (!fs.existsSync(this.gpioPath)) {\n    // The pin hasn't been exported yet so export it.\n    fs.writeFileSync(GPIO_ROOT_PATH + 'export', this.gpio);\n\n    // A hack to avoid the issue described here:\n    // https://github.com/raspberrypi/linux/issues/553\n    // I don't like this solution, but it enables compatibility with older\n    // versions of onoff, i.e., the Gpio constructor was and still is\n    // synchronous.\n    directionSet = false;\n    while (!directionSet) {\n      try {\n        tries += 1;\n        fs.writeFileSync(this.gpioPath + 'direction', direction);\n        directionSet = true;\n      } catch (e) {\n        if (tries === 10000) {\n          throw e;\n        }\n      }\n    }\n\n    if (edge) {\n      fs.writeFileSync(this.gpioPath + 'edge', edge);\n    }\n\n    if (!!options.activeLow) {\n      fs.writeFileSync(this.gpioPath + 'active_low', ONE);\n    }\n  } else {\n    // The pin has already been exported, perhaps by onoff itself, perhaps\n    // by quick2wire gpio-admin on the Pi, perhaps by the WiringPi gpio\n    // utility on the Pi, or perhaps by something else. In any case, an\n    // attempt is made to set the direction and edge to the requested\n    // values here. If quick2wire gpio-admin was used for the export, the\n    // user should have access to both direction and edge files. This is\n    // important as gpio-admin sets niether direction nor edge. If the\n    // WiringPi gpio utility was used, the user should have access to edge\n    // file, but not the direction file. This is also ok as the WiringPi\n    // gpio utility can set both direction and edge. If there are any\n    // errors while attempting to perform the modifications, just keep on\n    // truckin'.\n    try {\n      fs.writeFileSync(this.gpioPath + 'direction', direction);\n    } catch (ignore) {\n    }\n    try {\n      if (edge) {\n        fs.writeFileSync(this.gpioPath + 'edge', edge);\n      }\n      try {\n        fs.writeFileSync(this.gpioPath + 'active_low',\n          !!options.activeLow ? ONE : ZERO\n        );\n      } catch (ignore) {\n      }\n    } catch (ignore) {\n    }\n  }\n\n  this.valueFd = fs.openSync(valuePath, 'r+'); // Cache fd for performance.\n\n  // Read current value before polling to prevent unauthentic interrupts.\n  this.readSync();\n\n  this.poller = new Epoll(pollerEventHandler.bind(this));\n}\nexports.Gpio = Gpio;\n\n/**\n * Read GPIO value asynchronously.\n *\n * [callback: (err: error, value: number) => {}] // Optional callback\n */\nGpio.prototype.read = function (callback) {\n  fs.read(this.valueFd, this.readBuffer, 0, 1, 0, function (err, bytes, buf) {\n    if (typeof callback === 'function') {\n      if (err) {\n        return callback(err);\n      }\n\n      callback(null, buf[0] === ONE[0] ? 1 : 0);\n    }\n  });\n};\n\n/**\n * Read GPIO value synchronously.\n *\n * Returns - number // 0 or 1\n */\nGpio.prototype.readSync = function () {\n  fs.readSync(this.valueFd, this.readBuffer, 0, 1, 0);\n  return this.readBuffer[0] === ONE[0] ? 1 : 0;\n};\n\n/**\n * Write GPIO value asynchronously.\n *\n * value: number                  // 0 or 1\n * [callback: (err: error) => {}] // Optional callback\n */\nGpio.prototype.write = function (value, callback) {\n  var writeBuffer = value === 1 ? ONE : ZERO;\n  fs.write(this.valueFd, writeBuffer, 0, writeBuffer.length, 0, callback);\n};\n\n/**\n * Write GPIO value synchronously.\n *\n * value: number // 0 or 1\n */\nGpio.prototype.writeSync = function (value) {\n  var writeBuffer = value === 1 ? ONE : ZERO;\n  fs.writeSync(this.valueFd, writeBuffer, 0, writeBuffer.length, 0);\n};\n\n/**\n * Watch for hardware interrupts on the GPIO. Inputs and outputs can be\n * watched. The edge argument that was passed to the constructor determines\n * which hardware interrupts are watcher for.\n *\n * Note that the value passed to the callback does not represent the value of\n * the GPIO the instant the interrupt occured, it represents the value of the\n * GPIO the instant the GPIO value file is read which may be several\n * milliseconds after the actual interrupt. By the time the GPIO value is read\n * the value may have changed. There are scenarios where this is likely to\n * occur, for example, with buttons or switches that are not hadrware\n * debounced.\n *\n * callback: (err: error, value: number) => {}\n */\nGpio.prototype.watch = function (callback) {\n  var events;\n\n  this.listeners.push(callback);\n\n  if (this.listeners.length === 1) {\n    events = Epoll.EPOLLPRI;\n    if (this.opts.debounceTimeout > 0) {\n      events |= Epoll.EPOLLONESHOT;\n    }\n    this.poller.add(this.valueFd, events);\n  }\n};\n\n/**\n * Stop watching for hardware interrupts on the GPIO.\n */\nGpio.prototype.unwatch = function (callback) {\n  if (this.listeners.length > 0) {\n    if (typeof callback !== 'function') {\n      this.listeners = [];\n    } else {\n      this.listeners = this.listeners.filter(function (listener) {\n        return callback !== listener;\n      });\n    }\n\n    if (this.listeners.length === 0) {\n      this.poller.remove(this.valueFd);\n    }\n  }\n};\n\n/**\n * Remove all watchers for the GPIO.\n */\nGpio.prototype.unwatchAll = function () {\n  this.unwatch();\n};\n\n/**\n * Get GPIO direction.\n *\n * Returns - string // 'in', or 'out'\n */\nGpio.prototype.direction = function () {\n  return fs.readFileSync(this.gpioPath + 'direction').toString().trim();\n};\n\n/**\n * Set GPIO direction.\n *\n * direction: string // Specifies whether the GPIO should be configured as an\n *                   // input or output. The valid values are: 'in', 'out',\n *                   // 'high', and 'low'. 'high' and 'low' are variants of\n *                   // 'out' that configure the GPIO as an output with an\n *                   // initial level of high or low respectively.\n */\nGpio.prototype.setDirection = function (direction) {\n  fs.writeFileSync(this.gpioPath + 'direction', direction);\n};\n\n/**\n * Get GPIO interrupt generating edge.\n *\n * Returns - string // 'none', 'rising', 'falling' or 'both'\n */\nGpio.prototype.edge = function () {\n  return fs.readFileSync(this.gpioPath + 'edge').toString().trim();\n};\n\n/**\n * Set GPIO interrupt generating edge.\n *\n * edge: string // The interrupt generating edge for the GPIO. Can be\n *              // specified for GPIO inputs and outputs. The edge\n *              // specified determine what watchers watch for. The valid\n *              // values are: 'none', 'rising', 'falling' or 'both'.\n */\nGpio.prototype.setEdge = function (edge) {\n  fs.writeFileSync(this.gpioPath + 'edge', edge);\n};\n\n/**\n * Get GPIO activeLow setting.\n *\n * Returns - boolean\n */\nGpio.prototype.activeLow = function () {\n  return fs.readFileSync(\n    this.gpioPath + 'active_low')[0] === ONE[0] ? true : false;\n};\n\n/**\n * Set GPIO activeLow setting.\n *\n * invert: boolean // Specifies whether the values read from or\n *                 // written to the GPIO should be inverted. The\n *                 // interrupt generating edge for the GPIO also\n *                 // follow this this setting. The valid values for\n *                 // activeLow are true and false. Setting activeLow\n *                 // to true inverts. The default value is false.\n */\nGpio.prototype.setActiveLow = function (invert) {\n  fs.writeFileSync(this.gpioPath + 'active_low', !!invert ? ONE : ZERO);\n};\n\n/**\n * Get GPIO options.\n *\n * Returns - object // Must not be modified\n */\nGpio.prototype.options = function () {\n  return this.opts;\n};\n\n/**\n * Reverse the effect of exporting the GPIO to userspace. The Gpio object\n * should not be used after calling this method.\n */\nGpio.prototype.unexport = function () {\n  this.unwatchAll();\n  fs.closeSync(this.valueFd);\n  try {\n    fs.writeFileSync(GPIO_ROOT_PATH + 'unexport', this.gpio);\n  } catch (ignore) {\n    // Flow of control always arrives here when cape_universal is enabled on\n    // the bbb.\n  }\n};\n\n"}